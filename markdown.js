const Nearley = require('nearley');

/** Generated by Nearley **/
function id(x) {return x[0]; }
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "page$ebnf$1", "symbols": []},
    {"name": "page$ebnf$1$subexpression$1", "symbols": ["list", "line"]},
    {"name": "page$ebnf$1$subexpression$1", "symbols": ["line"]},
    {"name": "page$ebnf$1", "symbols": ["page$ebnf$1", "page$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "page$ebnf$2", "symbols": ["list"], "postprocess": id},
    {"name": "page$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "page", "symbols": ["page$ebnf$1", "page$ebnf$2"], "postprocess": ([pairs, last]) => [].concat(...pairs, last || [])},
    {"name": "list$ebnf$1", "symbols": ["listItem"]},
    {"name": "list$ebnf$1", "symbols": ["list$ebnf$1", "listItem"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "list", "symbols": ["list$ebnf$1"], "postprocess": ([items]) => `<ul>\n${items.join('\n')}\n</ul>`},
    {"name": "listItem$string$1", "symbols": [{"literal":"\n"}, {"literal":"*"}, {"literal":" "}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "listItem", "symbols": ["listItem$string$1", "string"], "postprocess": ([, str]) => `  <li>${str}</li>`},
    {"name": "line", "symbols": [{"literal":"\n"}, "string"], "postprocess": ([, str]) => str},
    {"name": "string$ebnf$1", "symbols": []},
    {"name": "string$ebnf$1", "symbols": ["string$ebnf$1", /[^\n*]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "string", "symbols": ["string$ebnf$1"], "postprocess": ([chars]) => chars.join("")}
]
  , ParserStart: "page"
}
/** End **/

const CompiledGrammar = new Nearley.Parser(
		grammar.ParserRules,
		grammar.ParserStart
	).grammar;

module.exports = (input)=>{
	const output = (new Nearley.Parser(CompiledGrammar)).feed(input);
	return output.results[0].join('\n');
};